#!/usr/bin/env zsh

# For math commands, e.g. = 2+5*3
= () {
    if [[ $1 == -h ]] || [[ $1 == --help ]]; then
        man bc
        return
    fi

    local calc="${@//x/*}"
    calc="${calc//,/}"
    calc="${calc//\[/\(}"
    calc="${calc//\]/\)}"
    bc -l <<< "scale=10;$calc"
}

# Allow the usage of '*' in =
alias eq='noglob ='

# For screenfetches on anonymous imageboards
anon() {
    local name="anonymous"
    local host="gentoo"

    PS1=${PS1//\%n/"$name"} PS1=${PS1//\%M/"$host"}
    printf '\033c'
}

# For comparing binary files
bdiff() {
    if [[ $# -lt 2 ]]; then
        echo "Not enough arguments."
        echo "Usage: bdiff first-file second-file"
        return 1
    fi

    cmp -l "$1" "$2" | gawk '{printf "%08X %02X %02X\n", $1-1, strtonum(0$2), strtonum(0$3)}'
}

# Currency conversion. Be sure to use official abbreviations
cconv() {
  wget -qO- "http://www.google.com/finance/converter?a=$1&from=$2&to=$3" | sed '/res/!d;s/<[^>]*>//g';
} 

# A simple confirmation message. Usage: 'confirm && (action)'
confirm() {
    read -p "Are you sure? [y/N] " confirm
    case "$confirm" in
        yes) return 0 ;;
        y) return 0 ;;
        Y) return 0 ;;
        *) return 1 ;;
    esac
}

# Count the number of files in the directory.
countf() {
    if [[ $# -eq 0 ]]; then
        ls -1 | wc -l
    else
        ls -1 $@ | wc -l
    fi
}

# Simple function to calculate date differences
datediff() {
    d1=$(date -d "$1" +%s)
    d2=$(date -d "$2" +%s)
    echo $(( (d1 - d2) / 86400 )) days
}

# Look for a certain .desktop file
findapp() {
    while [[ $# -gt 0 ]]; do
        grep -rnw "$1" /usr/share/applications/
        grep -rnw "$1" ~/.local/share/applications/
        shift
    done
}

# Insult the user if their command fails.
insult() {
    # Warning: slow
    printf 'root says: '
    curl -s randominsults.net | sed -n '/<strong>/{s;^.*<i>\(.*\)</i>.*$;\1;p}'
}

# Print your most used shell commands
mostused() {
    history \
      | awk 'BEGIN {FS="[ \t]+|\\|"} {print $3}' \
      | sort \
      | uniq -c \
      | sort -nr \
      | head
}

# Pretty print a JSON file
pjson() {
    echo "$@" | python -m json.tool
}

# Only remove if the target is a symbolic link
# or if it is a hard link with multiple links
rmln() {
    if [[ $# -eq 0 ]]; then
        echo >&2 'Usage: rmln link...'
        return 1
    fi

    for lnk in $@; do
        if [[ -L $lnk ]] || [[ $(stat -c %h "$lnk") -gt 1 ]]; then
            rm -v "$lnk"
        else
            printf >&2 "%s is not a link, won't remove.\n" "$lnk"
        fi
    done
}

# Generate a dice roll
roll() {
    local upper=$1
    [ -z "$upper" ] && upper=100
    echo $[ 1 + $[ RANDOM % ${upper} ]]
}

# Set the title of the terminal
settitle() {
   echo -ne "\e]2;$@\a\e]1;$@\a"; 
}

# Changes up how the train looks
sl() {
    local sett=e
    local rand=$[ RANDOM % 8 ]

    [ $[ $rand & 1 ] -gt 0 ] && sett+=a
    [ $[ $rand & 2 ] -gt 0 ] && sett+=l
    [ $[ $rand & 4 ] -gt 0 ] && sett+=F
    [ $[ $rand & 8 ] -gt 0 ] && sett+=c
    
    env sl -$sett
}

# Ask for confirmation and then suspend
suspend() {
    confirm && \
    suspendnow
}

# Suspend the computer
suspendnow() {
    # sudoers can suspend without typing a password
    sudo pm-suspend
}

# Suspend and lock the screen
suspendlock() {
    confirm && {
        suspendnow
        ~/Scripts/wm/i3_lock.sh
    }
}

# Suspend and lock the tty
suspendvlock() {
    confirm && {
        suspendnow
        vlock
    }
}

# List the options supported by this terminal.
termsupport() {
    infocmp -1 | \
      sed -nu 's/^[ \000\t]*//;s/[ \000\t]*$//;/[^ \t\000]\{1,\}/!d;/acsc/d;s/=.*,//p' | \
      column -c80
}

# Make a total of all the integer items in a column
totalcol() {
    if [[ -z $1 ]]; then
        return 1
    fi

    awk "{total += \$$1} END {print total}"
}

# Play some random white noise
whitenoise() {
    play -n synth 60:00 brownnoise -65 tremolo .20 vol -20db
}

